---
title: ""
author: Alex Pinch
date: 01/30/2023
format: 
  revealjs:
    standalone: true
    theme: [default, custom.scss]
    progress: true
incremental: false
highlight-style: a11y
---

## Modelling locally adaptive inversions

```{css, echo=FALSE}
  .reveal h2 {
  font-size: 55px;
  position: bottom;
}
```

![Alex Pinch, Jan. 30 2023](images/title_slide.jpg){width="100%"}

## Stopping recombination

![Fig. 2, Kirkpatrick 2010](images/kirkpatrick_2010.png){width="50%"}

-   When offspring are heterozygous for an inversion, recombination does not occur as a broken segment cannot find their homologous pair

::: notes
A simplified diagram of how an inversion prevents recombination. During recombination, chromosomal rearrangements like deletions can occur, but whole sections can also get flipped around. It's not like an insertion or deletion where the number of genes changes, and inversions aren't always super deleterious, so they stick around over generations! There's lots of interesting implications from the broader perspective of evolution. How they persist in populations is a bit puzzling, and they are suspected to drive speciation, and come to control important phenotypes like in Heliconious butterflies.
:::

## Why are inversions important?

-   By stopping recombination, harmful mutations aren't purged, resulting in their increase over time (Kirkpatrick 2010)
-   They can persist through populations and homozygotes can accumulate more deleterious mutations over time (Huang, 2022)
-   If genetic information is almost identical (only linear order changed), how do they spread?

::: notes
Inversions pose an interesting question in evolution: if it has almost the same genetic information as it's not-inverted counterpart, how can it spread through a population? And we know that some inversion heterozygotes have a lower mutation load than homozygotes
:::

## Local adaptation theory

-   An inversion's frequency can change across a geographical cline (Krimbas and Powell, 1992)
-   Suggests that they could be locally adaptive and contain genes that are environmentally favourable
-   If an inversion traps genes that become ecologically favoured, this could explain why they persist

::: notes
:::

## What we're testing

-   Across different environments, individuals that possess a locally advantageous inversion will have an increase in mutational load
-   Homozygous individuals will have a greater accumulation of deleterious mutations than heterozygotes

::: notes
By making a program that introduces an inversion, preventing recombination and giving inversion-carrying individuals a range of fitness benefits depending on which population they are from, we can make it output key data like fitness values, number of deleterious mutations and its inversion genotype. What we're expected to see is individuals that have a locally advantageous inversion will have an increase in mutational load, to the point where the inversion is lost. Homozygous individuals will have a greater accumulation of deleterious mutations than heterozygotes.
:::

## How inversions spread

![Fig. 1, Faria et al. 2019 (Modified)](images/faria_2019.jpg){width="50%"}

::: notes
A simplified outline for the different outcomes of an inversion, when an inversion arises, it can either become fixed or is lost immediately. However we're not really interested in the final outcomes of either fixation or speciation.
:::

## How inversions spread

![Fig. 1, Faria et al. 2019 (Modified)](images/faria_2019_2.jpg){width="50%"}

::: notes
More interested in this intermediate stage, whats happening as these inversions are maintained. In the case of our model, locally advantageous alleles causes some population divergence, but when does the mutational load increase tip this balance?
:::

## How we're testing it

-   By making a model that introduces a locally adaptive inversion across several populations we can keep track of fitness, number of mutations per genotype
-   Can run the model many times to find trends

## A SLiMtroduction

-   We built a forward-genetics simulation using SLiM
-   SLiM (**S**election on **Li**nked **M**utations) was developed by Ben Haller and Phillip Messer at Cornell
-   SLiM provides a basic framework for modelling individuals over generations
-   Computes at the gene level, not concerned with base pairs
-   Uses a proprietary programming language similar to R, but as fast as C

## A SLiMtroduction

![Haller, 2016](images/slim_functions.png){width="30%"}

::: notes
SLiM is one big loop, I'm pointing out the recombination function here because that's a pretty critical part for us and our model
:::

## Our model

::: columns
::: {.column width="60%"}
-   At time = 0
    -   Define a grid of subpopulations and establish a fitness gradient for inversion-carrying individuals
:::

::: {.column width="40%"}
![](images/populations.png){width="100%"}
:::
:::

## Our model

::: columns
::: {.column width="60%"}
-   After 50,000 generations:
    -   Define a start and end point variable for the inversion
    -   Give one individual two copies of a mutation at that start position, will serve as a marker
:::

::: {.column width="40%"}
![](images/populations.png){width="100%"}
:::
:::

## Our model

-   Every generation:
    -   Check every individual for that marker mutation
    -   If found: suppress recombination and manually alter fitness
    -   Individuals have a chance to migrate to another subpopulation, where their inversion will either help or hurt them

## Our model

-   What this model is not doing:
    -   It is not actually inverting a section of a simulated chromosome
    -   Instead, we define the length and place a marker to keep track of it, changing the breakpoints and fitness manually
    -   It is not keeping track of base pairs, codons, amino acids, proteins...

## Altering recombination

-   Preventing recombination is at the base of how inversions are physically maintained on the chromosome over time, this is the crux of the model
-   In heterozygotes, recombination must be prevented
-   In homozygotes, the breakpoints must be changed and told where the inversion is

## Altering recombination

-   SLiM does recombination automatically, so you must define a function named 'recombination' to supersede it
-   If this function returns false, SLiM's normal recombinaton function takes over
-   If this function returns true, SLiM considers recombination complete and continues the loop

## Altering recombination

![](images/flowchart.jpeg){width="70%"}

## Altering recombination

```{R}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "2-4|5-8|9-10|11-14|15-18|19-24|25-31"
recombination() {
  # Search both chromosomes of an individual for the inversion
	gm1 = genome1.containsMarkerMutation(m2, invStart);
	gm2 = genome2.containsMarkerMutation(m2, invStart);
	# If neither chromosomes have the inversion, return false
	if (!(gm1 | gm2)) { 
		return(F)
	}
	# Check if the breakpoints are outside the inversion
	inInv = (breakpoints > invStart) & (breakpoints <= invEnd);  
	# If their sum is even, return false
	if (sum(inInv) %% 2 == 0) { 
		return(F)
	}
	# If both chromosomes have the inversion (is homozygous)...
	if (gm1 & gm2) {
		left = (breakpoints == invStart); 
		right = (breakpoints == invEnd + 1);
		# Change the recombination breakpoints
		breakpoints = sort(c(breakpoints[!(left | right)], 
			c(invStart, invEnd + 1)[c(sum(left) == 0, sum(right) == 0)]));
		# Return true to make sure new breakpoints are preserved
		return(T) 
	} 
	# If none of the above, it is heterozygous
	else { 
	  # Draw new breakpoints and return true to preserve them
		breakpoints = sim.chromosome.drawBreakpoints(individual);
	}
	return(T)
}
```

## Previous work in modelling inversions

![Fig. 2A-B, Berdan et al. 2021 (Adapted)](images/berdan_2021.jpg){width="60%"}

::: notes
Berdan observed a sharp decrease in fitness and increase in mutation accumulation
:::

## Preliminary results

![](images/results_freq.png)

::: notes
Here we see the frequency of these genotypes over time, with very low frequency in the lower populations with the worst fitness, and an increase in frequency in populations where the inversion is more advantageous. This is expected
:::

## Preliminary results

![](images/results_meanfit.png)

::: notes
This is the mean fitness of all populations over time. Fitness can serve as a proxy for mutational load after we subtract the strict benefits we have given them in the model. This shows a very minimal decrease in homozygote fitness, while the heterozygotes fitness is maintained. This is in contrast to previous work by Berdan that saw a sharp decrease in fitness in inversion carrying individuals.
:::

## Preliminary results

![](images/results_fitness_pops.png)

::: notes
So we can look at fitness across different populations. Homozygotes have the worst fitness, as they will have accumulated a larger mutational load, heterozygotes decrease
:::

## Expected results

![](images/example_graph_1.jpeg)

## Expected results

![](images/example_graph_2.jpeg)

## Next steps

-   Results could be unexpected because of scaling issues, or the recombination function

-   Could look at mutations trapped in the inversion next, plot their contents across runs

-   Runs with an inversion with deleterious mutations locked in it may be outweighing the strict fitness benefit we give them

::: notes
Results could be unexpected because of scaling issues, or the recombination function isn't representative. We scaled down more than Berdan et al., so any scaling differences could have resulted in the observed differences.
:::

## Thank you!

Acknowledgements: SLiM development team (Ben Haller, Phillip Messer) as well as their slim-discuss Google forum

Dr. Greg Owens, whose guidance and work in sunflowers has spurred this interest in modelling inversions

## Questions?

![](images/end_slide.png){fig-align="right"}
