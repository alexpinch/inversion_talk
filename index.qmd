---
title: "Modelling locally adaptive inversions"
author: Alex Pinch
date: 01/30/2023
format: 
  revealjs:
    standalone: true
    theme: [default, custom.scss]
    progress: true
incremental: false
highlight-style: a11y
---

## 

![Fig. 8.10, Genetics: Analysis & Principles 7th Ed.](textbook_photo.png){width="50%"}

## Short and sweet

![Fig. 2, Kirkpatrick 2010, PLoS Biology](inversion_graphic.png){width="50%"}

## Long and bitter

-   The first inversion paper (Strutevant, 1921)
-   How inversions drive speciation (Fuller et al., 2017)
-   How inversions evolve (Kirkpatrick, 2010)

## What can models tell us about inversions?

-   Outline why models are critical

## What we hope to find

-   Inversions that are locally advantageous will still accumulate more deleterious mutations over time

## The necessity for SLiM

-   Ben Haller's dream

## One big loop

![SLiM Manual 2016](slim_functions.png){width="25%"}

## A generic overview of the model

-   At time = 0
    -   Define a swathe of the chromosome by a start and end point variable
    -   Give one individual two copies of a mutation at that start position
    -   This mutation will flag an individual as having an inversion

## A generic overview of the model

-   Every generation:
    -   Check every individual for that marker mutation, if found:
        -   Suppress recombination and manually alter fitness

## What this model is NOT doing

-   It is not actually inverting a section of a simulated chromosome
-   Instead, we define the length and place a marker to keep track of it, changing the breakpoints and fitness manually

## Why how we code recombination is important

-   Preventing recombination is the sole driver for maintaining an inversion over generations (citation)

## How we alter recombination

-   In heterozygotes, recombination must be prevented
-   In homozygotes, the breakpoints must be changed and told where the inversion is

## Editing SLiM's recombination

-   SLiM does recombination automatically, so you must define a function named 'recombination' to supersede it
-   If this function returns false, SLiM's normal recombinaton function takes over
-   If this function returns true, SLiM considers recombination over and continues the loop

## Our recombination function

![](recombination_flowchart.jpg){width="50%"}

## Our recombination function

```{R}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "2-4|5-8|9-10|11-14|15-18|19-24|25-31"
recombination() {
  # Search both chromosomes of an individual for the inversion
	gm1 = genome1.containsMarkerMutation(m2, invStart);
	gm2 = genome2.containsMarkerMutation(m2, invStart);
	# If neither chromosomes have the inversion, return false
	if (!(gm1 | gm2)) { 
		return(F)
	}
	# Check if the breakpoints are outside the inversion
	inInv = (breakpoints > invStart) & (breakpoints <= invEnd);  
	# If their sum is even, return false
	if (sum(inInv) %% 2 == 0) { 
		return(F)
	}
	# If both chromosomes have the inversion (is homozygous)...
	if (gm1 & gm2) {
		left = (breakpoints == invStart); 
		right = (breakpoints == invEnd + 1);
		# Change the recombination breakpoints
		breakpoints = sort(c(breakpoints[!(left | right)], 
			c(invStart, invEnd + 1)[c(sum(left) == 0, sum(right) == 0)]));
		# Return true to make sure new breakpoints are preserved
		return(T) 
	} 
	# If none of the above, it is heterozygous
	else { 
	  # Draw new breakpoints and return true to preserve them
		breakpoints = sim.chromosome.drawBreakpoints(individual);
	}
	return(T)
}
```

## (Aside) A sense of scale

-   This recombination function is called for every individual, in every population, every generation
-   500 individuals \* 9 populations \* 100 000 generations \* 1000 iterations of this script = 450 billion times

## October run results

-   Average fitness vs. genotype per region plot\

```{r}
library(tidyverse)
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```

## November run results

## (Aside) Parameter hell

-   Screenshot of model_final, model_final_final
-   Why this mindset is bad

## Flowchart of my roadblocks

-   Heaven graphic at the end
-   How do we get there?

## 

```{R}
#| echo: TRUE
#| eval: FALSE
recombination() {
  
}
```

## Questions
