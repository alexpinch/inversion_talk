[
  {
    "objectID": "index.html#modelling-locally-adaptive-inversions",
    "href": "index.html#modelling-locally-adaptive-inversions",
    "title": "",
    "section": "Modelling locally adaptive inversions",
    "text": "Modelling locally adaptive inversions\n\n\n\n\nAlex Pinch, Jan. 30 2023"
  },
  {
    "objectID": "index.html#stopping-recombination",
    "href": "index.html#stopping-recombination",
    "title": "",
    "section": "Stopping recombination",
    "text": "Stopping recombination\n\nFig. 2, Kirkpatrick 2010\nWhen offspring are heterozygous for an inversion, recombination does not occur as a broken segment cannot find their homologous pair\n\n\nA simplified diagram of how an inversion prevents recombination. During recombination, chromosomal rearrangements like deletions can occur, but whole sections can also get flipped around. It’s not like an insertion or deletion where the number of genes changes, and inversions aren’t always super deleterious, so they stick around over generations! There’s lots of interesting implications from the broader perspective of evolution. How they persist in populations is a bit puzzling, and they are suspected to drive speciation, and come to control important phenotypes like in Heliconious butterflies."
  },
  {
    "objectID": "index.html#why-are-inversions-important",
    "href": "index.html#why-are-inversions-important",
    "title": "",
    "section": "Why are inversions important?",
    "text": "Why are inversions important?\n\nBy stopping recombination, harmful mutations aren’t purged, resulting in their increase over time (Kirkpatrick 2010)\nThey can persist through populations and homozygotes can accumulate more deleterious mutations over time (Huang, 2022)\nIf genetic information is almost identical (only linear order changed), how do they spread?\n\n\nInversions pose an interesting question in evolution: if it has almost the same genetic information as it’s not-inverted counterpart, how can it spread through a population? And we know that some inversion heterozygotes have a lower mutation load than homozygotes"
  },
  {
    "objectID": "index.html#local-adaptation-theory",
    "href": "index.html#local-adaptation-theory",
    "title": "",
    "section": "Local adaptation theory",
    "text": "Local adaptation theory\n\nAn inversion’s frequency can change across a geographical cline (Krimbas and Powell, 1992)\nSuggests that they could be locally adaptive and contain genes that are environmentally favourable\nIf an inversion traps genes that become ecologically favoured, this could explain why they persist"
  },
  {
    "objectID": "index.html#what-were-testing",
    "href": "index.html#what-were-testing",
    "title": "",
    "section": "What we’re testing",
    "text": "What we’re testing\n\nAcross different environments, individuals that possess a locally advantageous inversion will have an increase in mutational load\nHomozygous individuals will have a greater accumulation of deleterious mutations than heterozygotes\n\n\nBy making a program that introduces an inversion, preventing recombination and giving inversion-carrying individuals a range of fitness benefits depending on which population they are from, we can make it output key data like fitness values, number of deleterious mutations and its inversion genotype. What we’re expected to see is individuals that have a locally advantageous inversion will have an increase in mutational load, to the point where the inversion is lost. Homozygous individuals will have a greater accumulation of deleterious mutations than heterozygotes."
  },
  {
    "objectID": "index.html#how-inversions-spread",
    "href": "index.html#how-inversions-spread",
    "title": "",
    "section": "How inversions spread",
    "text": "How inversions spread\n\nFig. 1, Faria et al. 2019 (Modified)\nA simplified outline for the different outcomes of an inversion, when an inversion arises, it can either become fixed or is lost immediately. However we’re not really interested in the final outcomes of either fixation or speciation."
  },
  {
    "objectID": "index.html#how-inversions-spread-1",
    "href": "index.html#how-inversions-spread-1",
    "title": "",
    "section": "How inversions spread",
    "text": "How inversions spread\n\nFig. 1, Faria et al. 2019 (Modified)\nMore interested in this intermediate stage, whats happening as these inversions are maintained. In the case of our model, locally advantageous alleles causes some population divergence, but when does the mutational load increase tip this balance?"
  },
  {
    "objectID": "index.html#how-were-testing-it",
    "href": "index.html#how-were-testing-it",
    "title": "",
    "section": "How we’re testing it",
    "text": "How we’re testing it\n\nBy making a model that introduces a locally adaptive inversion across several populations we can keep track of fitness, number of mutations per genotype\nCan run the model many times to find trends"
  },
  {
    "objectID": "index.html#a-slimtroduction",
    "href": "index.html#a-slimtroduction",
    "title": "",
    "section": "A SLiMtroduction",
    "text": "A SLiMtroduction\n\nWe built a forward-genetics simulation using SLiM\nSLiM (Selection on Linked Mutations) was developed by Ben Haller and Phillip Messer at Cornell\nSLiM provides a basic framework for modelling individuals over generations\nComputes at the gene level, not concerned with base pairs\nUses a proprietary programming language similar to R, but as fast as C"
  },
  {
    "objectID": "index.html#a-slimtroduction-1",
    "href": "index.html#a-slimtroduction-1",
    "title": "",
    "section": "A SLiMtroduction",
    "text": "A SLiMtroduction\n\nHaller, 2016\nSLiM is one big loop, I’m pointing out the recombination function here because that’s a pretty critical part for us and our model"
  },
  {
    "objectID": "index.html#our-model",
    "href": "index.html#our-model",
    "title": "",
    "section": "Our model",
    "text": "Our model\n\n\n\nAt time = 0\n\nDefine a grid of subpopulations and establish a fitness gradient for inversion-carrying individuals"
  },
  {
    "objectID": "index.html#our-model-1",
    "href": "index.html#our-model-1",
    "title": "",
    "section": "Our model",
    "text": "Our model\n\n\n\nAfter 50,000 generations:\n\nDefine a start and end point variable for the inversion\nGive one individual two copies of a mutation at that start position, will serve as a marker"
  },
  {
    "objectID": "index.html#our-model-2",
    "href": "index.html#our-model-2",
    "title": "",
    "section": "Our model",
    "text": "Our model\n\nEvery generation:\n\nCheck every individual for that marker mutation\nIf found: suppress recombination and manually alter fitness\nIndividuals have a chance to migrate to another subpopulation, where their inversion will either help or hurt them"
  },
  {
    "objectID": "index.html#our-model-3",
    "href": "index.html#our-model-3",
    "title": "",
    "section": "Our model",
    "text": "Our model\n\nWhat this model is not doing:\n\nIt is not actually inverting a section of a simulated chromosome\nInstead, we define the length and place a marker to keep track of it, changing the breakpoints and fitness manually\nIt is not keeping track of base pairs, codons, amino acids, proteins…"
  },
  {
    "objectID": "index.html#altering-recombination",
    "href": "index.html#altering-recombination",
    "title": "",
    "section": "Altering recombination",
    "text": "Altering recombination\n\nPreventing recombination is at the base of how inversions are physically maintained on the chromosome over time, this is the crux of the model\nIn heterozygotes, recombination must be prevented\nIn homozygotes, the breakpoints must be changed and told where the inversion is"
  },
  {
    "objectID": "index.html#altering-recombination-1",
    "href": "index.html#altering-recombination-1",
    "title": "",
    "section": "Altering recombination",
    "text": "Altering recombination\n\nSLiM does recombination automatically, so you must define a function named ‘recombination’ to supersede it\nIf this function returns false, SLiM’s normal recombinaton function takes over\nIf this function returns true, SLiM considers recombination complete and continues the loop"
  },
  {
    "objectID": "index.html#altering-recombination-2",
    "href": "index.html#altering-recombination-2",
    "title": "",
    "section": "Altering recombination",
    "text": "Altering recombination"
  },
  {
    "objectID": "index.html#altering-recombination-3",
    "href": "index.html#altering-recombination-3",
    "title": "",
    "section": "Altering recombination",
    "text": "Altering recombination\n\nrecombination() {\n  # Search both chromosomes of an individual for the inversion\n    gm1 = genome1.containsMarkerMutation(m2, invStart);\n    gm2 = genome2.containsMarkerMutation(m2, invStart);\n    # If neither chromosomes have the inversion, return false\n    if (!(gm1 | gm2)) { \n        return(F)\n    }\n    # Check if the breakpoints are outside the inversion\n    inInv = (breakpoints > invStart) & (breakpoints <= invEnd);  \n    # If their sum is even, return false\n    if (sum(inInv) %% 2 == 0) { \n        return(F)\n    }\n    # If both chromosomes have the inversion (is homozygous)...\n    if (gm1 & gm2) {\n        left = (breakpoints == invStart); \n        right = (breakpoints == invEnd + 1);\n        # Change the recombination breakpoints\n        breakpoints = sort(c(breakpoints[!(left | right)], \n            c(invStart, invEnd + 1)[c(sum(left) == 0, sum(right) == 0)]));\n        # Return true to make sure new breakpoints are preserved\n        return(T) \n    } \n    # If none of the above, it is heterozygous\n    else { \n      # Draw new breakpoints and return true to preserve them\n        breakpoints = sim.chromosome.drawBreakpoints(individual);\n    }\n    return(T)\n}"
  },
  {
    "objectID": "index.html#previous-work-in-modelling-inversions",
    "href": "index.html#previous-work-in-modelling-inversions",
    "title": "",
    "section": "Previous work in modelling inversions",
    "text": "Previous work in modelling inversions\n\nFig. 2A-B, Berdan et al. 2021 (Adapted)\nBerdan observed a sharp decrease in fitness and increase in mutation accumulation"
  },
  {
    "objectID": "index.html#preliminary-results",
    "href": "index.html#preliminary-results",
    "title": "",
    "section": "Preliminary results",
    "text": "Preliminary results\n\n\nHere we see the frequency of these genotypes over time, with very low frequency in the lower populations with the worst fitness, and an increase in frequency in populations where the inversion is more advantageous. This is expected"
  },
  {
    "objectID": "index.html#preliminary-results-1",
    "href": "index.html#preliminary-results-1",
    "title": "",
    "section": "Preliminary results",
    "text": "Preliminary results\n\n\nThis is the mean fitness of all populations over time. Fitness can serve as a proxy for mutational load after we subtract the strict benefits we have given them in the model. This shows a very minimal decrease in homozygote fitness, while the heterozygotes fitness is maintained. This is in contrast to previous work by Berdan that saw a sharp decrease in fitness in inversion carrying individuals."
  },
  {
    "objectID": "index.html#preliminary-results-2",
    "href": "index.html#preliminary-results-2",
    "title": "",
    "section": "Preliminary results",
    "text": "Preliminary results\n\n\nSo we can look at fitness across different populations. Homozygotes have the worst fitness, as they will have accumulated a larger mutational load, heterozygotes decrease"
  },
  {
    "objectID": "index.html#expected-results",
    "href": "index.html#expected-results",
    "title": "",
    "section": "Expected results",
    "text": "Expected results"
  },
  {
    "objectID": "index.html#expected-results-1",
    "href": "index.html#expected-results-1",
    "title": "",
    "section": "Expected results",
    "text": "Expected results"
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "",
    "section": "Next steps",
    "text": "Next steps\n\nResults could be unexpected because of scaling issues, or the recombination function\nCould look at mutations trapped in the inversion next, plot their contents across runs\nRuns with an inversion with deleterious mutations locked in it may be outweighing the strict fitness benefit we give them\n\n\nResults could be unexpected because of scaling issues, or the recombination function isn’t representative. We scaled down more than Berdan et al., so any scaling differences could have resulted in the observed differences."
  },
  {
    "objectID": "index.html#thank-you",
    "href": "index.html#thank-you",
    "title": "",
    "section": "Thank you!",
    "text": "Thank you!\nAcknowledgements: - SLiM development team (Ben Haller, Phillip Messer) as well as their help forum! - Dr. Greg Owens, whose guidance and work in sunflowers has spurred this interest in modelling inversions — Questions?"
  },
  {
    "objectID": "index.html#questions",
    "href": "index.html#questions",
    "title": "",
    "section": "Questions?",
    "text": "Questions?"
  }
]